/*
Theme styling
- Establish defaults for layouts
- Have custom overrides by class for anything not provided by bootstrap
- Styling overrides on bootstrap components
- Custom brand styling

*/

/*
NAMING RULES

BASE - default HTML tags, use as normal

LAYOUT — unrelated to content classes that define a structure of the document (grid, containers, etc.). Identified by the prefix "l-".

COMPONENTS— classes that depend on content, but do not define the visual style. Components are usually buttons or custom form elements. Identified by the prefix "c-".

UTILITIES — widely reusable classes that do one thing. Responsible for margins, text alignment, positioning, etc. They are identified by the "u-" prefix. Note that, bootstrap already has a lot of these, depends on need!

VISUAL classes — define visual styles of a component, such as colors, fonts, etc. They are prefixed with "v-".

STATE classes —  make it obvious that the class defines a state that can change (e.g. collapsed). Prefix with "is-/has-".

JAVASCRIPT — classes that are specifically for javascript hooks. Not much css action, more class names in the html. Prefix with "js-"
*/

/* setup defaults for the content*/

:root {
  --page-margin: 1rem;
  --gutter: 1.5rem;
  --corner-size: 0.875rem;
  --transition-time: 120ms;
}

* {
  box-sizing: border-box;
}

body {
  font-family: 'Nunito', sans-serif;
  font-size: 16px;
}

/* define usage of title font */

h1, h2, h3, h4, h5, h6, .btn, button {
  font-family: 'Montserrat', sans-serif;
  font-weight: 600;
}

main>section {
  padding: 2.5rem 0;
}

img {
  max-width: 100%;
}

img + p {
  margin-top: 1rem;
}

@media (min-width: 1200px) {
  main>section {
    padding: 4rem 0;
  }
}

/*
Usage of container and layout classes
  body
    header          - full width
      nav           - apply container
    main            - apply layout here if doing anything whacky
      section       - apply container here normally
        div         - apply layout (wrapper)
        section     - apply container here (subsection)
          div       - apply layout
            article - component layout classes here
    footer
      section
    
Alternatively
- Each top-level section (header, main > section, footer) is a grid-container
- Can nest the grid without issue, but must remember to declare which grid area a block goes in
- <body> & <main> can adopt a special grid layout, as their children already contained & have margins


  body              - grid-layouts (advise using main instead, since header and footer same place)
    header          - grid-container
      nav             - grid-column: contain
    main            - grid-layouts
      section       - grid-container
        banner        - grid-container[-full] (nesting) --> grid-column: full
          div           - grid-column: contain/content
        headings      - grid-column: contain/content
        paragraph     - grid-column: content
        div           - grid-column: contain
        section       - grid-column: contain, grid-layouts
          div           - content wrapper
          article       - content wrapper
        section       - grid-container[-full] (nesting) --> grid-column: full
          headings      - grid-column: content
          paragraph     - grid-column: content
          div           - grid-column: contain
    footer           - grid-container
      section          - grid-column: contain


- Semantics for container classes
  - Anything with "contain" as its column == direct descendent is NOT content, its more containers/wrappers
  - Anything with "content" as its column == direct descendents ARE content
  - Content is defined as text (headings, p, span, btn, links) and media (images, video)
  - However, for posts, "contain" primarily for images/media and "content" for any text
- Any container classes except the main "grid-container" can have layouts applied to it
*/

/* 
Container classes
- Keep content within a constraint
- 1200px == 75rem
- 720px == 45rem
- Flexbox and grid supports full width backgrounds (seems that fallback also works)
-- Flexbox containers are only for centering things without auto margins, width constraints still needed
-- Grid containers use grid which just works
*/

/* Grid container must be nestable, such that it takes up 100% of parent grid (edge to edge) */

/* 
  Grid container nesting cannot be done with item contain or content
  E.g.
    grid-container
      grid-container                  [valid nesting]
        item-contain, grid-container  [invalid nesting]   
  
  For nested layouts, use a layout class, grid-container is for defining linear sections only 
  This is why contain and content are labelled item not grid, they do not have display flexbox or grid
  You can however use layouts with grid-container
  E.g.
    section
      subsection        [custom layout + grid container] ==> full width layout
        article
        article
      subsection        [item-contain]
        heading
        div
          article
      subsection        [grid-container]
        subsubsection   [grid-container]
          heading       [item-content]     
          paragraph     [item-content]
          image         [item-contain]
  
  The aim is that each section can have a full width background if you use grid-container
  but still have constrained content
*/

.l-container {
  /* default */
  display: block;
  width: 100%;
  margin: 0 auto;
  /* Flexbox */
  display: flex;
  flex-direction: column;
  align-items: center;
  /* CSS Grid */
  display: grid;
  grid-column: viewport;
  grid-template-columns: [viewport-start] minmax(var(--page-margin, 1rem), 1fr) [container-start] minmax(0, 20fr) [content-start] minmax(auto, 45rem) [content-end] minmax(0, 20fr) [container-end] minmax(var(--page-margin, 1rem), 1fr) [viewport-end];
}

/* contained items fit into a maximum of 1200px == 75rem */

.l-container--wide {
  max-width: 75rem;
  grid-column: container;
}

/* content items fit into a maximum of 720px == 45rem, content usually refers to text-width */

.l-container--content {
  max-width: 45rem;
  grid-column: content;
}

/* 
Since these are still containers, fill the span of the page if < max-width 
Make sure they are centered and have page margins for readability
USE CUSTOM PROPERTY FALLBACK IF NOT CSS GRID RELATED - assumed css grid is superset of custom properties
*/

.l-container--wide, .l-container--content {
  width: 100%;
  margin: 0 auto;
  padding-left: 1rem;
  padding-right: 1rem;
  padding-left: var(--page-margin, 1rem);
  padding-right: var(--page-margin, 1rem);
}

@media (min-width: 1200px) {
  .l-container {
    grid-template-columns: [viewport-start] minmax(var(--page-margin, 1rem), 1fr) [container-start] minmax(0, 14rem) [content-start] 45rem [content-end] minmax(0, 14rem) [container-end] minmax(var(--page-margin, 1rem), 1fr) [viewport-end];
  }
}

/* Flexbox takes control of centering */

@supports (display: flex) {
  .l-container, .l-container--wide, .l-container--content {
    margin: 0;
  }
}

/* grid-template takes care of widths, page margins, centering */

@supports (display: grid) {
  .l-container, .l-container--wide, .l-container--content {
    max-width: 100%;
    padding-left: 0;
    padding-right: 0;
    align-items: normal;
  }
}

/* 
Layout classes 
*/

/* 
Grid multi is for multi-column layouts 
Some predefined layouts are given
- N equally sized columns, where n is the number of columns > 1
- One-dimensional row with wrap after N columns, where N > 1
*/

.l-grid-multi, .l-grid-multi-wrap {
  display: flex;
  display: grid;
  flex-wrap: wrap;
  grid-gap: var(--gutter, 1rem);
  margin-bottom: 2rem;
  margin-top: 2rem;
}

/* inline-block is ignored if flexbox or css grid is supported */

.l-grid--item {
  width: 100%;
  flex: 0 0 100%;
  margin-top: 0;
  padding: 0;
}

.l-grid-multi-2 {
  --col-count: 2;
}

.l-grid-multi-3 {
  --col-count: 3;
}

.l-grid-multi-4 {
  --col-count: 4;
}

.l-grid-multi-5 {
  --col-count: 5;
}

/* Landscape mobile */

@media (min-width: 576px) {
  .l-grid--item {
    margin: 0 1rem 1rem 0;
    margin: 0 var(--gutter, 1rem) var(--gutter, 1rem) 0;
  }
  .l-grid-multi-2, .l-grid-multi-3, .l-grid-multi-4, .l-grid-multi-5 {
    grid-template-columns: repeat(2, 1fr);
  }
  .l-grid-multi-2>.l-grid--item, .l-grid-multi-3>.l-grid--item, .l-grid-multi-4>.l-grid--item, .l-grid-multi-5>.l-grid--item {
    max-width: 47%;
    flex: 0 0 calc(50% - 1rem);
    flex: 0 0 calc(50% - var(--gutter, 1rem));
  }
}

/* Tablet Landscape */

@media (min-width: 992px) {
  :root {
    --page-margin: 1.25rem;
    --gutter: 2rem;
  }
  .l-grid-multi-3, .l-grid-multi-5 {
    grid-template-columns: repeat(3, 1fr);
  }
  .l-grid-multi-3>.l-grid--item, .l-grid-multi-5>.l-grid--item {
    max-width: 31%;
    flex: 0 0 calc(33.33% - 1rem);
    flex: 0 0 calc(33.33% - var(--gutter, 1rem));
  }
}

/* Desktop or large landscape tablet */

@media (min-width: 1168px) {
  .l-grid-multi-4 {
    grid-template-columns: repeat(4, 1fr);
  }
  .l-grid-multi-5 {
    grid-template-columns: repeat(5, 1fr);
  }
  .l-grid-multi-4>.l-grid--item {
    max-width: 23%;
    flex: 0 0 calc(25% - 1rem);
    flex: 0 0 calc(25% - var(--gutter, 1rem));
  }
  .l-grid-multi-5>.l-grid--item {
    max-width: 18%;
    flex: 0 0 calc(20% - 1rem);
    flex: 0 0 calc(20% - var(--gutter, 1rem));
  }
}

@supports (display: flex) {
  .l-grid-multi>.l-grid--item {
    max-width: 100%;
  }
}

@supports (display: grid) {
  .l-grid-multi, .l-grid-multi-wrap {
    margin-right: 0;
  }
  .l-grid-multi>.l-grid--item, .l-grid-multi-wrap>.l-grid--item {
    width: 100%;
    margin: 0;
  }
  .l-grid-multi-wrap {
    grid-template-columns: repeat(auto-fit, minmax(calc(1200px / calc(var(--col-count, 1) + 1)), 1fr));
  }
  .l-grid-multi-wrap>.l-grid--item {
    max-width: 100%;
  }
}

/* Component styling */

/* The hero section - banner */

header.banner {
  background-position: center center;
  background-size: cover;
  background-repeat: no-repeat;
  color: white;
}

.c-section-header {
  padding: 4rem 0;
}

.c-stat {
  text-align: center;
}

.c-stat--figure {
  font-size: 5rem;
  color: #107180;
}

.c-stat--info {
  font-size: 1.125rem;
}

nav .btn.donate {
  margin-top: 1rem;
}

@media (min-width: 992px) {
  nav .btn.donate {
    display: inline-block;
    margin-top: 0;
    margin-left: 2rem;
  }
}


/* Bootstrap component style overrides */

/* Bootstrap cards customisations */

.card {
  border-radius: 12px;
  border-radius: var(--corner-size);
  box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.16), 0px 2px 4px 0px rgba(0, 0, 0, 0.08);
  border: none;
  transition-duration: 100ms;
  transition-duration: var(--transition-time);
}

a.card {
  color: black;
  text-decoration: none;
}

.card-img-top {
  border-top-left-radius: 12px;
  border-top-right-radius: 12px;
  border-top-left-radius: var(--corner-size);
  border-top-right-radius: var(--corner-size);
}

.card-img-bottom {
  border-bottom-left-radius: 12px;
  border-bottom-right-radius: 12px;
  border-top-left-radius: var(--corner-size);
  border-top-right-radius: var(--corner-size);
}

.card:hover, .card:active, .card:focus {
  box-shadow: 0px 2px 24px 0px rgba(0, 0, 0, 0.24), 0px 2px 32px 0px rgba(0, 0, 0, 0.12);
  transform: translateY(-0.25rem)
}

/* IE11 flexbox bug fix for images in nested flexboxes */

.card-img-top {
  flex: 0 0 auto;
}