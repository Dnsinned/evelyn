/*
Theme styling
- Establish defaults for layouts
- Have custom overrides by class for anything not provided by bootstrap
- Styling overrides on bootstrap components
- Custom brand styling

*/


/* setup defaults for the content*/
body {
  font-family: 'Nunito', sans-serif;
  font-size: 16px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  --gutter: 1.25rem;
  --col-count: 1;
}

/* define usage of title font */
h1, h2, h3, h4, h5, h6, .btn, button {
  font-family: 'Montserrat', sans-serif;
  font-weight: 600;
}

/* top level layout block styles */
/* give each top level block some padding */
body > section, body > article, body > aside, body > div, header, footer {
  padding: 3rem 1rem;
}

header {
  padding-top: 0;
}

footer {
  padding-bottom: 1rem;
}

/* content inside top level blocks should be centered and be constrained */
/* Everything should be of type display block by default, no inlining; this ensures centering works */
/* TEMPORARY 
    Define what exactly should be 75rem, since most content will be 44rem instead
    1200px should only apply to other layout tags without content inside
*/
header > *, footer > *, body > section > *, body > article > *, body > div > *, body > aside > *, .container-1200 {
  margin: 0 auto;
  max-width: 75rem;
  display: block;
}

/* TEMPORARY
    44rem will be the default for "content", only layouts will default to 75rem
    See above css rule for more info  
*/
h1, h2, h3, h4, h5, h6, p, .text-width, ul, blockquote {
  max-width: 44rem;
}

/* remove additional padding on the asides 
body > aside {
  padding: 3rem 0;
}*/

/* default behaviour for aside sections 
aside > * {
  width: 18rem;
  display: inline-block;
  vertical-align:top;
  padding: 1rem 1rem 1rem 0;
}*/

/* content block separation (spacing between titles, text, images etc) */
/* arbitrary (non-semantic) blocks like divs are not affected by this, div purely for grouping */
/* subsections defined by ONLY the <section> tag is also not affected, it follows next rule */
/* BUG! aside should only be affected where its children are stacked vertically! */
section > *:not(:first-child):not(section), article > *:not(:first-child):not(section), aside > *:not(:first-child):not(section) {
  margin-top: 1rem;
  margin-bottom: 0;
}

/* sub-sections should have extra spacing within them */
section > section, div > section, aside > section, footer > section {
  margin-top: 2.5rem;
}

.section-intro {
  margin-top: 0;
}

body > *:nth-child(even) {
  background-color: #fafafa;
}

img {
  width: 100%;
}

/* class for container that can accommodate any number of child blocks */
.grid-multi {
  display: flex;
  display: grid;
  flex-wrap: wrap;
  grid-gap: var(--gutter);
  grid-template-columns: repeat(auto-fit, minmax(calc(1200px / calc(var(--col-count) + 1)), 1fr));
  margin-top: 0;
  margin-bottom: 0;
}

/* styles needed for grid-multi with n columns per row */
.grid-multi-2 {
  --col-count: 2;
}
.grid-multi-3 {
  --col-count: 3;
}
.grid-multi-4 {
  --col-count: 4;
}
.grid-multi-5 {
  --col-count: 5;
}

.grid-multi-item {
  max-width: 100%;
  flex: 0 0 100%;
  margin-top: 0;
}

/* If the number of elements is a fixed number (equal to the column count), spread them apart evenly */
.grid-multi-fixed {
  justify-content: space-around;
}

@media (min-width: 576px) {
  .grid-multi {
    margin-right: -1rem;
  }
  @supports (display: grid) {
    .grid-multi {
      margin-right: auto;
    }
  } 
  .grid-multi-item {
    flex: 0 0 calc(50% - 1rem);
    margin: 0 1rem 1rem 0;
  }
}

@media (min-width: 768px) {
  .grid-multi-3 > .grid-multi-item {
    flex: 0 0 calc(33.33% - 1rem);
  }
}

@media (min-width: 992px) {
  .grid-multi-4 > .grid-multi-item {
    flex: 0 0 calc(25% - 1rem);
  }
  .grid-multi-5 > .grid-multi-item {
    flex: 0 0 calc(20% - 1rem);
  }
}

@supports (display: grid) {
  .grid-multi-item {
    margin: 0;
  }
} 

/* Old calculation which defines the exact width of each column at the breakpoint but doesn't scale */
.wrapper {
  grid-template-columns: repeat(auto-fit, minmax(calc((1200px - ( var(--gutter) * (var(--col-count) + 1))) / var(--col-count)), 1fr));
}


