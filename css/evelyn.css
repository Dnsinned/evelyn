/*
Theme styling
- Establish defaults for layouts
- Have custom overrides by class for anything not provided by bootstrap
- Styling overrides on bootstrap components
- Custom brand styling

*/

/*
NAMING RULES

BASE - default HTML tags, use as normal

LAYOUT — unrelated to content classes that define a structure of the document (grid, containers, etc.). Identified by the prefix "l-".

COMPONENTS— classes that depend on content, but do not define the visual style. Components are usually buttons or custom form elements. Identified by the prefix "c-".

UTILITIES — widely reusable classes that do one thing. Responsible for margins, text alignment, positioning, etc. They are identified by the "u-" prefix. Note that, bootstrap already has a lot of these, depends on need!

VISUAL classes — define visual styles of a component, such as colors, fonts, etc. They are prefixed with "v-".

STATE classes —  make it obvious that the class defines a state that can change (e.g. collapsed). Prefix with "is-/has-".

JAVASCRIPT — classes that are specifically for javascript hooks. Not much css action, more class names in the html. Prefix with "js-"
*/

/* setup defaults for the content*/

:root {
  --page-margin: 1rem;
  --gutter: 2rem;
  --corner-size: 0.875rem;
  --transition-time: 120ms;
  --link-color: #007bff;
}

* {
  box-sizing: border-box;
}

body {
  font-family: 'Nunito', sans-serif;
  font-size: 16px;
}

/* define usage of title font */

h1, h2, h3, h4, h5, h6, .btn, button {
  font-family: 'Montserrat', sans-serif;
  font-weight: 600;
}

main>section {
  padding: 2.5rem 0;
}

img {
  max-width: 100%;
}

img+p {
  margin-top: 1rem;
}

@media (min-width: 1200px) {
  main>section {
    padding: 4rem 0;
  }
}

/* custom container class */

.l-container {
  /* default */
  display: block;
  width: 100%;
  margin: 0 auto;
  /* CSS Grid */
  display: grid;
  grid-column: viewport;
  grid-template-columns: [viewport-start] minmax(var(--page-margin, 1rem), 1fr) [container-start] minmax(0, 20fr) [content-start] minmax(auto, 45rem) [content-end] minmax(0, 20fr) [container-end] minmax(var(--page-margin, 1rem), 1fr) [viewport-end];
}

/* contained items fit into a maximum of 1200px == 75rem */

.l-container--wide {
  max-width: 75rem;
  grid-column: container;
}

/* content items fit into a maximum of 720px == 45rem, content usually refers to text-width */

.l-container--content {
  max-width: 45rem;
  grid-column: content;
}

.l-container--wide.l-container__flush, .l-container--content.l-container__flush {
  max-width: 100%;
  grid-column: viewport;
}

/* 
Since these are still containers, fill the span of the page if < max-width 
Make sure they are centered and have page margins for readability
USE CUSTOM PROPERTY FALLBACK IF NOT CSS GRID RELATED - assumed css grid is superset of custom properties
*/

.l-container--wide, .l-container--content {
  width: 100%;
  margin: 0 auto;
  padding-left: 1rem;
  padding-right: 1rem;
}

@media (min-width: 720px) {
  .l-container--content.l-container__flush {
    max-width: 45rem;
    grid-column: content;
  }
}

@media (min-width: 768px) {
  :root {
    --page-margin: 1.25rem;
  }
}

@media (min-width: 1200px) {
  .l-container {
    grid-template-columns: [viewport-start] minmax(var(--page-margin, 1rem), 1fr) [container-start] minmax(0, 14rem) [content-start] 45rem [content-end] minmax(0, 14rem) [container-end] minmax(var(--page-margin, 1rem), 1fr) [viewport-end];
  }
  .l-container--wide.l-container__flush {
    max-width: 75rem;
    grid-column: container;
  }
}

/* for flush containers, remove the page margins */

/* grid-template takes care of widths, page margins, centering */

@supports (display: grid) {
  .l-container, .l-container--wide, .l-container--content {
    margin: 0;
    max-width: 100%;
    padding-left: 0;
    padding-right: 0;
  }
}

/* 
Layout classes 
*/

/* 
Grid multi is for multi-column layouts 
Some predefined layouts are given
- N equally sized columns, where n is the number of columns > 1
- One-dimensional row with wrap after N columns, where N > 1
*/

.l-grid-multi, .l-grid-multi-wrap, .l-grid-fixed {
  display: grid;
  margin-bottom: 2rem;
  margin-top: 2rem;
}

/* inline-block is ignored if flexbox or css grid is supported */

.l-grid--item {
  width: 100%;
  flex: 1 1 auto;
  margin-bottom: 2rem;
}

.l-grid-multi-2 {
  --col-count: 2;
}

.l-grid-multi-3 {
  --col-count: 3;
}

.l-grid-multi-4 {
  --col-count: 4;
}

.l-grid-multi-5 {
  --col-count: 5;
}

.l-grid-10 {
  --col-count: 10;
}

.l-grid-12 {
  --col-count: 12;
}

[class^="l-grid-col"] {
  grid-column: 2 / span var(--col-count, 12);
}

[class^="l-grid-col"]:first-of-type {
  grid-column: 2 / span var(--col-count, 12);
}

[class^="l-grid-col"]:last-of-type {
  grid-column: span var(--col-count, 12) / -2;
}


/* Landscape mobile */

@media (min-width: 576px) {
  .l-grid-multi-2, .l-grid-multi-3, .l-grid-multi-4, .l-grid-multi-5 {
    grid-template-columns: repeat(2, 1fr);
  }
  .l-grid-multi-wrap {
    grid-template-columns: repeat(auto-fit, minmax(calc(1200px / calc(var(--col-count, 1) + 1)), 1fr));
  }
}

@media (min-width: 768px) {}

/* Tablet Landscape */

@media (min-width: 992px) {
  .l-grid-multi-3, .l-grid-multi-5 {
    grid-template-columns: repeat(3, 1fr);
  }
  .l-grid-preset__a {
    --col-ratios: 25% 25% 50%;
    grid-template-areas: "a b large" "c d large";
  }
}

/* Desktop or large landscape tablet */

@media (min-width: 1200px) {
  .l-grid-multi-4 {
    grid-template-columns: repeat(4, 1fr);
  }
  .l-grid-multi-5 {
    grid-template-columns: repeat(5, 1fr);
  }
  .l-grid-col-1 {
    --col-width: 2;
  }
  .l-grid-col-2 {
    --col-width: 2;
  }
  .l-grid-col-3 {
    --col-width: 3;
  }
  .l-grid-col-4 {
    --col-width: 4;
  }
  .l-grid-col-5 {
    --col-width: 5;
  }
  .l-grid-col-6 {
    --col-width: 6;
  }
  .l-grid-col-7 {
    --col-width: 7;
  }
  .l-grid-col-8 {
    --col-width: 8;
  }
  .l-grid-col-10 {
    --col-width: 10;
  }
  .l-grid-col-12 {
    --col-width: 12;
  }
  [class^="l-grid-col"] {
    grid-column: span var(--col-width, 1);
  }
  [class^="l-grid-col"]:first-of-type {
    grid-column: 2 / span var(--col-width, 1);
  }
  [class^="l-grid-col"]:last-of-type {
    grid-column: span var(--col-width, 1) / -2;
  }
}

.l-grid-fixed {
  grid-template-columns: repeat(var(--col-count, 1), 1fr);
}

@supports (display: grid) {
  .l-grid-multi, .l-grid-multi-wrap, .l-grid-fixed {
    margin-left: 0;
    margin-right: 0;
  }
  .l-grid-multi>.l-grid--item, .l-grid-multi-wrap>.l-grid--item, .l-grid-fixed>.l-grid--item {
    max-width: 100%;
    margin-bottom: 0;
  }
  /* optional grid-gutter for proper spacing using css grid */
  .l-grid-gutter {
    grid-gap: var(--gutter, 1rem);
  }
  .l-grid-gutter>.l-grid--item {
    padding-left: 0;
    padding-right: 0;
    margin-bottom: 0;
  }
}

/* Component styling */

/* The hero section - banner */

header.banner {
  background-position: center center;
  background-size: cover;
  background-repeat: no-repeat;
  color: white;
}

.section-header {
  padding: 4rem 0;
}

.stat {
  text-align: center;
}

.stat--figure {
  font-size: 5rem;
  color: #107180;
}

.stat--info {
  font-size: 1.125rem;
}

nav .btn.donate {
  margin-top: 1rem;
}

/* Custom card-like component specifically for profiles (photo with text snippet) */

.profile {
  --image-size: 4rem;
  display: grid;
  grid-gap: 1.25rem;
  grid-template-columns: calc(var(--image-size)) minmax(0, 1fr);
  grid-template-areas: "photo details";
}

.profile>* {
  /* Immediate descendents: photo and details */
  display: inline-block;
  vertical-align: top;
  overflow: hidden;
}

.profile--photo {
  grid-area: photo;
  margin: 0 1.25rem 1.25rem 0;
}

.profile--photo img {
  border-radius: 50%;
  object-fit: cover;
  width: 64px;
  height: 64px;
}

.profile--details {
  width: 75%;
  grid-area: details;
}

/*.profile .name {}
.profile .role {}
.profile .bio {}*/

@media (min-width: 576px) {
  .profile {
    --image-size: 6rem;
  }
  .profile--photo img {
    width: 96px;
    height: 96px;
  }
}

@media (min-width: 992px) {
  nav .btn.donate {
    display: inline-block;
    margin-top: 0;
    margin-left: 2rem;
  }
}

@supports (display: grid) {
  .profile--photo {
    max-width: 100%;
    margin: 0;
  }
  .profile--details {
    width: 100%;
  }
}

/* Bootstrap component style overrides */

/* Bootstrap cards customisations */

.card {
  border-radius: 12px;
  border-radius: var(--corner-size, 12px);
  box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.16), 0px 0px 8px 0px rgba(0, 0, 0, 0.08);
  border: none;
  transition-duration: 100ms;
  transition-duration: var(--transition-time, 100ms);
}

.card-img-top {
  border-top-left-radius: 12px;
  border-top-right-radius: 12px;
  border-top-left-radius: var(--corner-size 12px);
  border-top-right-radius: var(--corner-size 12px);
}

.card-img-bottom {
  border-bottom-left-radius: 12px;
  border-bottom-right-radius: 12px;
  border-top-left-radius: var(--corner-size 12px);
  border-top-right-radius: var(--corner-size 12px);
}

/* conservative minimum height to minimise image loading jankiness */

.card--img {
  min-height: 200px;
}

a.card {
  color: black;
  text-decoration: none;
}

/* consider using a mixin */

.card:hover, .card:active, .card:focus {
  box-shadow: 0px 2px 20px 0px rgba(0, 0, 0, 0.24), 0px 2px 40px 0px rgba(0, 0, 0, 0.12);
  transform: translateY(-0.1rem)
}

/* 
Icons that are in hyperlinked entities (card, list-item) should have the link colour
Naming structure is semantic absed on common combinatory tags and classes,
e.g. a.card implies a card that is in itself a link
*/

a.card i, a.list-group-item i {
  color: #007bff;
  color: var(--link-color, #007bff);
  text-decoration: none;
}

/* TOO SPECIFIC - NEED TO USE MORE GENERAL CLASS NAME */

.file-meta {
  margin-right: 1rem;
}

/* IE11 flexbox bug fix for images in nested flexboxes */

.card-img-top {
  flex: 0 0 auto;
}